package bet

import (
	"math/rand"
	"time"
	"github.com/koinkoin-io/koinkoin.backend/pkg/err"
)

// BetService declare the function Bet that is a function to bet coins.
type BetService interface {
	Bet() error
}

// Bet is structure that implement BetService.
type Bet struct {
	Result           int    `json:"result"`           // Result is the number generated by the Bet method.
	Earn             uint64 `json:"earn"`             // Earn is the number that the user win or lose.
	Win              bool   `json:"win"`              // Win is a boolean to say if yes or no the user has win.
	Chance           int    `json:"chance"`           // Chance is the parameter sent to Bet.
	Coins            uint64 `json:"coins"`            // Coins is the amount of coins that the player bet.
	AfterCoins       uint64 `json:"afterCoins"`       // NewCoins is the amount of new coins after add or remove the gain.
	BeforeCoins      uint64 `json:"beforeCoins"`      // BeforeCoins is the amount of old coins before bet.
	TotalCoinsBefore uint64 `json:"totalCoinsBefore"` // TotalCoinsBefore is the amount of all old coins before bet.
}

// New return a new structure of type Bet that implement BetService.
// Assign chance and coins, pre-compute earn gain if win.
func New(coins uint64, chance int, allCoins uint64) *Bet {
	return &Bet{
		Coins:            coins,
		Chance:           chance,
		Earn:             getEarn(chance, coins),
		Win:              true,
		TotalCoinsBefore: allCoins,
	}
}

// getEarn is the function that compute the earn taking into account the
// luck and the bet that the bettor put.
func getEarn(chance int, coins uint64) uint64 {
	res := uint64(float64(coins) * float64(1.-(float64(chance)/100.)))
	if res == 0 {
		return 1
	}
	return res
}

// random generate a random number between min and max.
// seed is defined with time.Now().UTC().UnixNano().
func random(min, max int) int {
	rand.Seed(time.Now().UTC().UnixNano())
	return rand.Intn(max-min) + min
}

// Bet check:
//  - if chance is >= to 98 -> Error
//  - if chance is <= 2 -> Error
//  - if coins < 5 -> Error
// If it's a loose, re-assign earn and win.
func (c *Bet) Bet() *err.Err {

	// Check errors.
	if c.Chance >= 98 {
		return err.ChanceCantBeEqOrHigher98
	} else if c.Chance <= 2 {
		return err.ChanceCantBeLesser2
	} else if c.Coins < 5 {
		return err.CoinsCantBeLesser5
	}

	// Generate a number between 0 and 100 and set it to Result.
	c.Result = random(0, 100)

	if c.Result > c.Chance {
		c.Earn = c.Coins
		c.Win = false
	}

	return nil
}
